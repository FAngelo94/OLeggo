"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var imagepicker = require("nativescript-imagepicker");
var fs = require("tns-core-modules/file-system");
var list;
var imageSrc;
function pageLoaded(args) {
    var page = args.object;
    list = page.getViewById("urls-list");
    imageSrc = page.getViewById("imageSrc");
}
exports.pageLoaded = pageLoaded;
function onSelectMultipleTap(args) {
    var path = fs.path.join(fs.knownFolders.documents().path, "Bella");
    var folder = fs.Folder.fromPath(path);
    console.info(path);
    console.info(folder);
    console.info(fs.knownFolders.documents().path);
    console.info(fs.knownFolders.documents());
    console.info(fs.knownFolders.path);
    console.info(fs.path);
    console.info("folder created");
}
exports.onSelectMultipleTap = onSelectMultipleTap;
function onSelectSingleTap(args) {
    var context = imagepicker.create({ mode: "single" });
    startSelection(context, true);
}
exports.onSelectSingleTap = onSelectSingleTap;
function startSelection(context, isSingle) {
    context
        .authorize()
        .then(function () {
        list.items = [];
        return context.present();
    })
        .then(function (selection) {
        console.info("Selection done:");
        selection.forEach(function (selected) {
            console.info("----------------");
            console.info("uri: " + selected.uri);
            if (isSingle) {
                selected.getImage({ maxWidth: 200, maxHeight: 200, aspectRatio: 'fill' })
                    .then(function (imageSource) {
                    imageSrc.src = imageSource;
                    console.info("SRC=" + selected);
                    console.info(imageSource.saveToFile("/data/user/0/org.nativescript.imagepickerdemo/prova.jpg", "jpg"));
                    console.info("saved complete");
                });
            }
            else {
                imageSrc.visibility = 'hidden';
            }
        });
        list.items = selection;
    }).catch(function (e) {
        console.log(e);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0Esc0RBQXdEO0FBQ3hELGlEQUFtRDtBQUVuRCxJQUFJLElBQUksQ0FBQztBQUNULElBQUksUUFBUSxDQUFDO0FBRWIsb0JBQTJCLElBQWU7SUFDdEMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM3QixJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBSkQsZ0NBSUM7QUFFRCw2QkFBb0MsSUFBSTtJQUNwQyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN0RSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDaEMsQ0FBQztBQVZELGtEQVVDO0FBRUQsMkJBQWtDLElBQUk7SUFDbEMsSUFBSSxPQUFPLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUhELDhDQUdDO0FBRUQsd0JBQXdCLE9BQU8sRUFBRSxRQUFRO0lBQ3JDLE9BQU87U0FDRixTQUFTLEVBQUU7U0FDWCxJQUFJLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzdCLENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxVQUFTLFNBQVM7UUFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBUyxRQUFRO1lBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDWCxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQztxQkFDeEUsSUFBSSxDQUFDLFVBQUMsV0FBVztvQkFDZCxRQUFRLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQztvQkFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLHlEQUF5RCxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQzNILE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDaEMsQ0FBQyxDQUFDLENBQUM7WUFDUSxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osUUFBUSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7WUFDbkMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcGFnZSc7XHJcbmltcG9ydCB7IGlzQW5kcm9pZCB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3BsYXRmb3JtXCI7XHJcbmltcG9ydCAqIGFzIGltYWdlcGlja2VyIGZyb20gXCJuYXRpdmVzY3JpcHQtaW1hZ2VwaWNrZXJcIjtcclxuaW1wb3J0ICogYXMgZnMgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZmlsZS1zeXN0ZW1cIjtcclxuXHJcbmxldCBsaXN0O1xyXG5sZXQgaW1hZ2VTcmM7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFnZUxvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIGxldCBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XHJcbiAgICBsaXN0ID0gcGFnZS5nZXRWaWV3QnlJZChcInVybHMtbGlzdFwiKTtcclxuICAgIGltYWdlU3JjID0gcGFnZS5nZXRWaWV3QnlJZChcImltYWdlU3JjXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25TZWxlY3RNdWx0aXBsZVRhcChhcmdzKSB7XHJcbiAgICB2YXIgcGF0aCA9IGZzLnBhdGguam9pbihmcy5rbm93bkZvbGRlcnMuZG9jdW1lbnRzKCkucGF0aCwgXCJCZWxsYVwiKTtcclxuXHR2YXIgZm9sZGVyID0gZnMuRm9sZGVyLmZyb21QYXRoKHBhdGgpO1xyXG4gICAgY29uc29sZS5pbmZvKHBhdGgpO1xyXG4gICAgY29uc29sZS5pbmZvKGZvbGRlcik7XHJcblx0Y29uc29sZS5pbmZvKGZzLmtub3duRm9sZGVycy5kb2N1bWVudHMoKS5wYXRoKTtcclxuXHRjb25zb2xlLmluZm8oZnMua25vd25Gb2xkZXJzLmRvY3VtZW50cygpKTtcclxuXHRjb25zb2xlLmluZm8oZnMua25vd25Gb2xkZXJzLnBhdGgpO1xyXG5cdGNvbnNvbGUuaW5mbyhmcy5wYXRoKVxyXG5cdGNvbnNvbGUuaW5mbyhcImZvbGRlciBjcmVhdGVkXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25TZWxlY3RTaW5nbGVUYXAoYXJncykge1xyXG4gICAgbGV0IGNvbnRleHQgPSBpbWFnZXBpY2tlci5jcmVhdGUoeyBtb2RlOiBcInNpbmdsZVwiIH0pO1xyXG4gICAgc3RhcnRTZWxlY3Rpb24oY29udGV4dCwgdHJ1ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0YXJ0U2VsZWN0aW9uKGNvbnRleHQsIGlzU2luZ2xlKSB7XHJcbiAgICBjb250ZXh0XHJcbiAgICAgICAgLmF1dGhvcml6ZSgpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxpc3QuaXRlbXMgPSBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQucHJlc2VudCgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIlNlbGVjdGlvbiBkb25lOlwiKTtcclxuICAgICAgICAgICAgc2VsZWN0aW9uLmZvckVhY2goZnVuY3Rpb24oc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIi0tLS0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJ1cmk6IFwiICsgc2VsZWN0ZWQudXJpKTtcclxuICAgICAgICAgICAgICAgIGlmIChpc1NpbmdsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLmdldEltYWdlKHsgbWF4V2lkdGg6IDIwMCwgbWF4SGVpZ2h0OiAyMDAsIGFzcGVjdFJhdGlvOiAnZmlsbCcgfSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbigoaW1hZ2VTb3VyY2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTcmMuc3JjID0gaW1hZ2VTb3VyY2U7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUuaW5mbyhcIlNSQz1cIitzZWxlY3RlZCk7XHJcblx0XHRcdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKGltYWdlU291cmNlLnNhdmVUb0ZpbGUoXCIvZGF0YS91c2VyLzAvb3JnLm5hdGl2ZXNjcmlwdC5pbWFnZXBpY2tlcmRlbW8vcHJvdmEuanBnXCIsIFwianBnXCIpKTtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5pbmZvKFwic2F2ZWQgY29tcGxldGVcIik7XHJcblx0XHRcdFx0XHR9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTcmMudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGlzdC5pdGVtcyA9IHNlbGVjdGlvbjtcclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxufSJdfQ==